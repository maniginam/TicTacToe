lein run

(defprotocol Players
  (who-is-playing [this]))
(defrecord Humans [tries]
  Players
  (who-is-playing [this]))
(def players (Human. 0))
(def players (Humans. 0))
(who-is-playing 0)
lein run
(with-open [o (output-stream "gina.txt"]
(with-open [o (output-stream "gina.txt")]
(.write o 65))
lein spec -a
(def arr (into-array Byte/TYPE (range 128)))
(slurp arr)
(println arr)
(count board)
(def board {0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8})
(count board)
(def thing {0 0 1 1 2 2 3 3})
(assoc thing 0 "X")
(map #(int? %) thing)
(0 ting)
(thing 0)
thing
(int? (thing 1))
(map #(int? (thing %)) thing)
(key thing)
(keys thing)
(def superthing {:thing thing :other 99})
(map #(int? ((:thing superthing) %)) (:thing superthing))
(map #(int? (:thing %)) (:thing superthing))
(:thing 1)
(1 :thing)
(map #(int? (% %)) (keys (:thing superthing)))
(map #(int? ((:thing superthing) %)) (keys (:thing superthing)))
(first [])
(apply min [0 10 3 4 5])
(let [box 3 piece "X"]
(replace [box piece] [0 1 2 3 4 5 6 7 8]))
(def box 3)
(def piece "X")
(def board [0 1 2 3 4 5 6 7 8])
(replace [piece] (nth board box))
(replace [piece] board)
(replace [1 2 piece 4 5 6] board)
(replace {box piece} board)
