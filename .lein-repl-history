ttt.main run
ttt/main run
/main run
-X main/run
clj -X main/run
(require '[next.jdbc :as j])
(def db {:dbtype "h2" :dbname "example"})
(def ds (j/get-datasource db)
)
(j/execute! ds ["create table address (id int auto-Increment primary key, name varchar(32), email varchar(255))"])
(require '[next.jdbc :as j])
(def db {:dbtype "h2" :dbname "example"})
(def ds (j/get-datasource db))
(j/execute! ds ["create table address ( id inte auto_increment primary key, name varchar(32) email varchar(255))"])
(j/execute! ds ["create table address ( id int auto_increment primary key, name varchar(32) email varchar(255))"])
(j/execute! ds ["create table address (id int auto_increment primary key, name varchar(32) email varchar(255))"])
(def ds (j/get-datasource db))
(j/execute! ds ["
create table address (
  id int auto_increment primary key,
  name varchar(32),
  email varchar(255)
)"])
(j/execute! ds ["
insert into address(name,email)
values('Gina M', 'maniginam@gmail.com')"])
(j/execute! ds ["select * from address"])
(def db-spec {:dbtype "mysql" :dbname "example" :user "root" :password "secret"}))
(def db-spec {:dbtype "mysql" :dbname "example" :user "root" :password "secret"})
(def db-url (str "http://localhost:8082"))
(j/execute! db-spec ["
create table address (
  id int auto_increment primary key,
  name varchar(32),
  email varchar(255)
)"])
(assoc db-spec :port "http://localhost:8082")
(j/execute! db-spec ["
create table address (
  id int auto_increment primary key,
  name varchar(32),
  email varchar(255)
)"])
(assoc db-spec :hose "http://localhost:8082")
(j/execute! db-spec ["
create table address (
  id int auto_increment primary key,
  name varchar(32),
  email varchar(255)
)"])
(j/execute! ttt-ds ["
alter table tttgames add (
users int unsigned)
"])
(j/get-connection ttt-ds)
(def ttt-db {:dbtype "h2" :dbname "ttt"})
(def ttt-ds (j/get-datasource ttt-db))
(j/execute! ttt-ds ["
alter table tttgames add (
users int unsigned)
"])
(j/execute! ttt-ds ttt-ds)
(j/execute! ttt-ds tttgames)
(j/execute! ttt-ds tttgames :all)
(j/execute! ttt-ds tttgames all)
(j/execute! ttt-ds tttgames :all)
(j/execute! ttt-ds ["
find-by-keys table tttgames (
all
)"])
(find-by-keys ttt-ds tttgames :all)
(j/find-by-keys ttt-ds tttgames :all)
(sql/find-by-keys ttt-ds :tttgames [:all])
(j/find-by-keys ttt-ds :tttgames [:all])
(require '[next.jdbc :as sql])
(sql/find-by-keys ttt-ds :tttgames ["board = ?" "nil"])
(require '[next.jdbc.sql :as s])
(s/find-by-keys ttt-ds :tttgames ["board = ?" "nil"])
(s/find-by-keys ttt-ds :tttgames [:all])
(s/find-by-keys ttt-ds :tttgames :all)
(s/insert! ttt-ds :tttgames {:console :terminal :status :playing :current-player :player1 :player1 {:player-num 1 :piece "X" :type :human} :database :mysql :board ["X" "O" 2 3 4 5 6 7 8]})
(s/find-by-keys ttt-ds :tttgames :all)
(s/insert! ttt-ds :tttgames {:console :terminal :status :playing :currentplayer :player1 :player1 {:playernum 1 :piece "X" :type :human} :database :mysql :board ["X" "O" 2 3 4 5 6 7 8]})
(s/insert! ttt-ds :tttgames {:console :terminal :status :playing :board ["X" "O" 2 3 4 5 6 7 8] :currentplayer :player1 :player1 {:playernum 1 :piece "X" :type :human} :database :mysql})
(s/insert! ttt-ds :tttgames {:console :terminal :status :playing :board ["X" "O" 2 3 4 5 6 7 8]})
(def db {:dbtype "h2" :dbname "tictactoe"})
(def ds (sql/get-datasource ttt-db))
(sql/execute! ds ["
create table games (
id int auto_increment primary key,
(require '[next.jdbc :as sql])
(require '[next.jdbc.sql :as s])
(def db {dbtype "h2" :dbname "ttt"})
(def ds (sql/get-datasource db))
(def db {:dbtype "h2" :dbname "ttt"})
(def ds (sql/get-datasource db))
(s/insert! ttt-ds :tttgames {:console :terminal :status :playing :board ["X" "O" 2 3 4 5 6 7 8]})
(s/insert! ttt-ds :tttgames {:console ":terminal" :status ":playing" :board "["X" "O" 2 3 4 5 6 7 8]"})
(s/insert! ds :tttgames {:console ":terminal" :status ":playing" :board "["X" "O" 2 3 4 5 6 7 8]"})
(s/insert! ds :tttgames {:console ":terminal" :status ":playing" :board "['X' 'O' 2 3 4 5 6 7 8]"})
(s/find-by-key ds :tttgames :all)
(s/find-by-keys ds :tttgames :all)
(s/find-by-keys ds :tttgames {:id 1})
(s/find-by-keys ds :tttgames {:id "1"})
(s/find-by-keys ds :tttgames ["id = ?" 1])
(s/insert! ds :tttgames {:console "terminal" :status ":playing" :board "['X' 'O' 2 3 4 5 6 7 8] :currentplayer ":player1" :board-size 3})
)
"
)
(s/insert! ds :tttgames {:console "terminal" :status ":playing" :board "['X' 'O' 2 3 4 5 6 7 8]" :currentplayer ":player1" :board-size 3})
(sql/execute! tttds ["
delete table tttgames"])
(sql/execute! ds ["
delete table tttgames"])
(sql/execute! ds ["
delete table 'tttgames'"])
(s/as-cols board)
(sql/execute! ds ["
create table games (
id int auto_increment primary key,
console varchar(32),
status varchar(32),
board-size varchar(32),
users tinyint(32),
current-player varchar(32),
player1 varchar(255),
player2 varchar(255),
board varchar(255),
empty-board varchar(255),
played-boxes varchar(255),
message-key varchar(32),
game-count int(255)
,
database varchar(32),
depth tinyint(32),
level varchar(32))
"])
(sql/execute! ds ["
create table games (
id int auto_increment primary key,
console varchar(32),
status varchar(32),
users int(32),
current-player varchar(32),
player1 varchar(255),
player2 varchar(255),
board varchar(255),
board-size varchar(32),
empty-board varchar(255),
played-boxes varchar(255),
message-key varchar(32),
game-count int(255),
database varchar(32),
depth int(32),
level varchar(32))"])
(sql/execute! ds ["
create table games (
id int auto_increment primary key,
console varchar(32),
status varchar(32),
users int,
current-player varchar(32),
player1 varchar(255),
player2 varchar(255),
board varchar(255),
board-size varchar(32),
empty-board varchar(255),
played-boxes varchar(255),
message-key varchar(32),
game-count int(255),
database varchar(32),
depth int(32),
level varchar(32))"])
(sql/execute! ds ["
  create table games (
  id int auto_increment primary key,
  console varchar(32),
  status varchar(32),
  users int,
  current-player varchar(32),
  player1 varchar(255),
  player2 varchar(255),
  board varchar(255),
  board-size varchar(32),
  empty-board varchar(255),
  played-boxes varchar(255),
  message-key varchar(32),
  game-count int,
  database varchar(32),
  depth int,
  level varchar(32))"])
(sql/execute! ds ["
  create table games (
  id int auto_increment primary key,
  console varchar(32),
  status varchar(32),
  users int unsigned,
  current-player varchar(32),
  player1 varchar(255),
  player2 varchar(255),
  board varchar(255),
  board-size varchar(32),
  empty-board varchar(255),
  played-boxes varchar(255),
  message-key varchar(32),
  game-count int unsigned,
  database varchar(32),
  depth int unsigned,
  level varchar(32))"])
(sql/execute! ds ["
  create table games (
  id int auto_increment primary key,
  console varchar(32),
  status varchar(32),
  users tinyint(32_,
  currentplayer varchar(32),
  player1 varchar(255),
  player2 varchar(255),
  board varchar(255),
  boardsize varchar(32),
  emptyboard varchar(255),
  playedboxes varchar(255),
  messagekey varchar(32),
  gamecount int(255),
  database varchar(32),
  depth tinyint(32),
  level varchar(32))"])
(sql/execute! ds ["
  create table games (
  id int auto_increment primary key,
  console varchar(32),
  status varchar(32),
  users tinyint(32),
  currentplayer varchar(32),
  player1 varchar(255),
  player2 varchar(255),
  board varchar(255),
  boardsize varchar(32),
  emptyboard varchar(255),
  playedboxes varchar(255),
  messagekey varchar(32),
  gamecount int(255),
  database varchar(32),
  depth tinyint(32),
  level varchar(32))"])
(s/get-by-id ds :games 1)
(s/get-by-id ds :games 2)
(s/find-by-keys ds :games :all)
(s/get-ids ds :games)
(require '[next.jdbc.plan :as plan])
(plan/select! ds :id (sql/plan ...))
(plan/select! ds :id)
(plan/select! ds :id ["select * from table"])
(plan/select! ds [:id] ["select * from table"])
(plan/select! ds [:id :status] ["select * from table"])
(plan/select! ds [:id :status] ["select * from table games"])
(plan/select! ds [:id :status] ["select * from table" games])
(plan/select! ds games [:id :status] ["select * from table"])
(s/find-by-keys ds :games :id)
(s/find-by-keys ds :games :all)
(s/update! ds :games {:depth 5} :id 2)
(s/update! ds :games {:depth 5} {:id 2})
(s/find-by-keys ds :games {:id 2})
(map #(if (int? %) % (str %)) {:console (:console test-game)
                                   :status  (:status test-game)
                                   :users   (:users test-game)})
(def test-game {:dad :keith :mom :gina :first :rex :baby :leo})
(map #(if (int? %) % (str %)) {:console (:console test-game)
                                   :status  (:status test-game)
                                   :users   (:users test-game)})
(map #(if (int? %) % (str %)) {:dad (:dad test-game) :mom (:mom test-game) :first (:rex test-game) :baby (:baby test-game)})
(assoc test-game :num 1)
(map #(if (int? %) % (str %)) {:dad (:dad test-game) :mom (:mom test-game) :first (:rex test-game) :baby (:baby test-game)})
(map #(if (int? %) % (str %)) {:dad (:dad test-game) :mom (:mom test-game) :first (:rex test-game) :baby (:baby test-game) :number (:num test-game)})
(map #(if (int? %) (value %) (str %)) {:dad (:dad test-game) :mom (:mom test-game) :first (:rex test-game) :baby (:baby test-game) :num (:num test-game)})
(map #(if (int? %) (vals %) (str %))
{:dad (:dad test-game) :mom (:mom test-game) :first (:rex test-game) :baby (:baby test-game) :num (:num test-game)})
(map #(if (int? %) (val %) (str %))
{:dad (:dad test-game) :mom (:mom test-game) :first (:rex test-game) :baby (:baby test-game) :num (:num test-game)})
(map #(if (int? %) (% test-game) (str %))
{:dad (:dad test-game) :mom (:mom test-game) :first (:rex test-game) :baby (:baby test-game) :num (:num test-game)})
(map #(if (int? (% test-game)) (% test-game) (str %))
{:dad (:dad test-game) :mom (:mom test-game) :first (:rex test-game) :baby (:baby test-game) :num (:num test-game)})
(apply str {:dad (:dad test-game) :mom (:mom test-game) :first (:rex test-game) :baby (:baby test-game) :num (:num test-game)})
(:num test-game)
test-game
(assoc test-game :num 1)
test-game
(def test-game {:dad :keith :mom :gina :boy1 :rex :age1 2 :boy2 :leo :age2 1})
test-game
(apply str {:dad (:dad test-game) :mom (:mom test-game) :boy1 (:boy1 test-game) :baby (:boy2 test-game) :rex-age (:age1 test-game) :leo-age (:age2 test-game)})
(map (if (int? (% test-game)) (% test-game) (str (% test-game))) test-game)
(map #(if (int? (% test-game)) (% test-game) (str (% test-game))) test-game)
(map #(val %) test-game)
(map #(if (int? (val %)) (val %) (str (val %))) test-game)
(s/find-by-keys ds :games {:id 2})
(s/get-by-id ds :games 2)
(sql/execute-one! ds ["select * from games where is = ?" 2]
)
(sql/execute-one! ds ["select * from games where is = ?" 2]
)
(require '[next.jdbc.result-set :as rs])
(sql/execute-one! ds ["select * from games where is = ?" 2]
{:build-fn rs/as-unqualified-lower-maps})
(sql/execute-one! ds ["select * from games where id = ?" 2]
)
(sql/execute-one! ds ["select * from games where id = ?" 2]
{:build-fn rs/as-unqualified-lower-maps})
(last (s/find-by-keys ds :games :all))
(last (s/find-by-keys ds :games :id))
(s/find-by-keys ds :games :all)
(first (last (s/find-by-keys ds :games :all)))
(last (s/find-by-keys ds :games :all))
(:id (s/find-by-keys ds :games :all))
(:ID (s/find-by-keys ds :games :all))
(:GAMES/ID (s/find-by-keys ds :games :all))
(keywords (s/find-by-keys ds :games :all))
(keyword (s/find-by-keys ds :games :all))
(s/find-by-keys ds :games :all)
(last (s/find-by-keys ds :games :all))
(first (last (s/find-by-keys ds :games :all)))
(second (last (s/find-by-keys ds :games :all)))
(last (last (s/find-by-keys ds :games :all)))
(nth (s/find-by-keys ds :games :all) 0)
(first (nth (s/find-by-keys ds :games :all) 0))
(:ID (nth (s/find-by-keys ds :games :all) 0))
(:GAMES/ID (nth (s/find-by-keys ds :games :all) 0))
(:GAMES/ID (s/find-by-keys ds :games :all))
(:GAMES/ID (first (s/find-by-keys ds :games :all)))
(:GAMES/ID (first (last (s/find-by-keys ds :games :all))))
(:GAMES/ID (last (s/find-by-keys ds :games :all)))
(:games/id (last (s/find-by-keys ds :games :all)))
(:GAMES/ID (last (s/find-by-keys ds :games :all)))
(def table "GAMES")
(concat (keyword table) "/ID")
(keyword table)
(cons (keyword table) "/ID")
(conj (keyword table) "/ID")
(apply cons (keyword table) "/ID")
(apply str (keyword table) "/ID")
(keyword (apply str table "/ID"))
(hash x)
(hasd 3)
(hash 3)
(hash-map 3)
(hash-map "{:mom :gina :boy :rex :baby :leo :dad :keith"}")
(hash-map "{:mom :gina :boy :rex :baby :leo :dad :keith}")
(apply hash-map "{:mom :gina :boy :rex :baby :leo :dad :keith}"))
(apply hash-map "{:mom :gina :boy :rex :baby :leo :dad :keith}")
(list test-game)
(str test-game)
(def test-str (str test-game))
(list test-str)
(map #(assoc {} % %) test-str)
(map #(keyword %) test-str)
(re-seq #"\w+" test-str)
(keyword (first (re-seq #"\w+" test-str)))
(int (nth (re-seq #"\w+" test-str) 7))
(Integer/parseInt (nth (re-seq #"\w+" test-str) 7))
(def dbmap {:player1 {:player-num 1 :piece "X" :type :human}})
(def dbmap-str (str dbmap))
dbmap-str
(def dbmap-str (assoc dbmap :player1 (str (:player1 dbmap))))
dbmap-str
(re-seq (:player1 dbmap-str))
(re-seq #"\w+" (:player1 dbmap-str))
(escape (:player1 dbmap-str) "-" \)
)
{:player-num 1 :piece (nth (re-seq #"\w+" (:player1 dbmap-str)) 4)}
(clojure.edn/read-string dbmap-str)
(clojure.edn/read-string {:people "person" :dogs "1"})
(clojure.edn/read-string (str {:people "person" :dogs "1"}))
(clojure.edn/read-string (str dbmap-str))
(clojure.edn/read-string (str (:player1 dbmap-str)))
(s/delete! ds games ["id <= ?" 111])
(def db :dbtype "h2" :dbname "ttt" :ResultSetMetaDataOptions "1"})
(s/delete! ds :games ["id <= ?" 111])
(:GAMES/ID (last (s/find-by-keys ds :games :all)))
(s/delete! ds :games ["id <= ?" 170])
(:GAMES/ID (last (s/find-by-keys ds :games :all)))
(count (s/find-by-keys ds :games :all))
(s/find-by-keys ds :games :all)
(s/delete! ds :games ["id <= ?" 173])
(count (s/find-by-keys ds :games :all))
(s/find-by-keys ds :games :all)
(s/update! ds :games {:id 1} {:id 173})
(s/find-by-keys ds :games :all)
(count (s/find-by-keys ds :games :all))
(s/find-by-keys ds :games :all)
(sql/execute! ds ["
create table ttt (
id int auto_increment primary key,
(sql/execute! ds ["
create table ttt (
  #_=>   id int auto_increment primary key,
  #_=>   console varchar(32),
  #_=>   status varchar(32),
  #_=>   users tinyint(32),
  #_=>   currentplayer varchar(32),
  #_=>   player1 varchar(255),
  #_=>   player2 varchar(255),
  #_=>   board varchar(255),
  #_=>   boardsize varchar(32),
  #_=>   emptyboard varchar(255),
  #_=>   playedboxes varchar(255),
  #_=>   messagekey varchar(32),
  #_=>   gamecount int(255),
  #_=>   database varchar(32),
  #_=>   depth tinyint(32),
  #_=>   level varchar(32))"])
(sql/execute! ds ["
create table ttt (
create table ttt
     id int auto_increment primary key,
     console varchar(32),
     status varchar(32),
     users tinyint(32),
     currentplayer varchar(32),
     player1 varchar(255),
     player2 varchar(255),
     board varchar(255),
     boardsize varchar(32),
     emptyboard varchar(255),
     playedboxes varchar(255),
     messagekey varchar(32),
     gamecount int(255),
     database varchar(32),
     depth tinyint(32),
     level varchar(32))")])
(sql/execute! ds ["
create table ttt (
(sql/execute! ds ["
create table ttt
     id int auto_increment primary key,
     console varchar(32),
     status varchar(32),
     users tinyint(32),
     currentplayer varchar(32),
     player1 varchar(255),
     player2 varchar(255),
     board varchar(255),
     boardsize varchar(32),
     emptyboard varchar(255),
     playedboxes varchar(255),
     messagekey varchar(32),
     gamecount int(255),
     database varchar(32),
     depth tinyint(32),
     level varchar(32))"])
(sql/execute! ds ["
create table ttt (
     id int auto_increment primary key,
     console varchar(32),
     status varchar(32),
     users tinyint(32),
     currentplayer varchar(32),
     player1 varchar(255),
     player2 varchar(255),
     board varchar(255),
     boardsize varchar(32),
     emptyboard varchar(255),
     playedboxes varchar(255),
     messagekey varchar(32),
     gamecount int(255),
     database varchar(32),
     depth tinyint(32),
     level varchar(32))"])
(s/find-by-keys ds :ttt :all)
(count (s/find-by-keys ds :ttt :all))
(count (s/find-by-keys ds :test :all))
(sql/execute! ds ["
alter table ttt
add table varchar(32))"])
(sql/execute! ds ["
alter table ttt
add Table varchar(32))"])
(def db {:dbtype "h2" :dbname "ttt" :ResultSetMetaDataOptions "1"})
(def ds (jdbc/get-datasource db))
(def db {:dbtype "h2" :dbname "ttt" :ResultSetMetaDataOptions "1"})
(def ds (jdbc/get-datasource db))
(require '[next.jdbc :as jdbc])
(require '[next.jdbc.sql :as sql])
(def db {:dbtype "h2" :dbname "ttt" :ResultSetMetaDataOptions "1"})
(def ds (jdbc/get-datasource db))
(def table "TTT")
(sql/find-by-keys ds (keyword table) :all)
(require '[next.jdbc.sql :as s])
(s/find-by-keys ds (keyword table) :all)
id-keyword (keyword (apply str table "/ID"))
        last-game-id (id-keyword (last (sql/find-by-keys ds (keyword table) :all)))
(def id-keyword (keyword (apply str table "/ID")))
(def last-game-id (id-keyword (last (sql/find-by-keys ds (keyword table) :all)))
)
(def last-game-id (id-keyword (last (s/find-by-keys ds (keyword table) :all)))
)
(jdbc/execute-one! ds [(str "select * from " table " where id = ?") last-game-id]
                       {:builder-fn rs/as-unqualified-lower-maps})
(require '[next.jdbc.result-set :as rs])
(jdbc/execute-one! ds [(str "select * from " table " where id = ?") last-game-id]
                       {:builder-fn rs/as-unqualified-lower-maps})
